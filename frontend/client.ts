// Code generated by the Encore 1.48.13 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly akun: akun.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly dashboard: dashboard.ServiceClient
    public readonly kalkulator: kalkulator.ServiceClient
    public readonly kategori: kategori.ServiceClient
    public readonly laporan: laporan.ServiceClient
    public readonly tenant: tenant.ServiceClient
    public readonly transaksi: transaksi.ServiceClient
    public readonly tujuan: tujuan.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.akun = new akun.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.dashboard = new dashboard.ServiceClient(base)
        this.kalkulator = new kalkulator.ServiceClient(base)
        this.kategori = new kategori.ServiceClient(base)
        this.laporan = new laporan.ServiceClient(base)
        this.tenant = new tenant.ServiceClient(base)
        this.transaksi = new transaksi.ServiceClient(base)
        this.tujuan = new tujuan.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_akun_create_create } from "~backend/akun/create";
import { deleteAkun as api_akun_delete_deleteAkun } from "~backend/akun/delete";
import { get as api_akun_get_get } from "~backend/akun/get";
import { list as api_akun_list_list } from "~backend/akun/list";
import { update as api_akun_update_update } from "~backend/akun/update";

export namespace akun {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteAkun = this.deleteAkun.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new account.
         */
        public async create(params: RequestType<typeof api_akun_create_create>): Promise<ResponseType<typeof api_akun_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/akun`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_akun_create_create>
        }

        /**
         * Soft deletes an account.
         */
        public async deleteAkun(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/akun/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves an account by ID.
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_akun_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/akun/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_akun_get_get>
        }

        /**
         * Retrieves all accounts for a tenant.
         */
        public async list(params: RequestType<typeof api_akun_list_list>): Promise<ResponseType<typeof api_akun_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                jenis:       params.jenis,
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                "tenant_id": params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/akun`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_akun_list_list>
        }

        /**
         * Updates an account.
         */
        public async update(params: RequestType<typeof api_akun_update_update>): Promise<ResponseType<typeof api_akun_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                jenis:        params.jenis,
                keterangan:   params.keterangan,
                "mata_uang":  params["mata_uang"],
                "nama_akun":  params["nama_akun"],
                "saldo_awal": params["saldo_awal"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/akun/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_akun_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { login as api_auth_login_login } from "~backend/auth/login";
import { logout as api_auth_logout_logout } from "~backend/auth/logout";
import { refreshToken as api_auth_refresh_refreshToken } from "~backend/auth/refresh";
import { register as api_auth_register_register } from "~backend/auth/register";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.login = this.login.bind(this)
            this.logout = this.logout.bind(this)
            this.refreshToken = this.refreshToken.bind(this)
            this.register = this.register.bind(this)
        }

        /**
         * Authenticates a user and returns their profile with tenants.
         */
        public async login(params: RequestType<typeof api_auth_login_login>): Promise<ResponseType<typeof api_auth_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_login>
        }

        /**
         * Logs out user by invalidating refresh token.
         */
        public async logout(params: RequestType<typeof api_auth_logout_logout>): Promise<void> {
            await this.baseClient.callTypedAPI(`/auth/logout`, {method: "POST", body: JSON.stringify(params)})
        }

        /**
         * Refreshes access token using refresh token.
         */
        public async refreshToken(params: RequestType<typeof api_auth_refresh_refreshToken>): Promise<ResponseType<typeof api_auth_refresh_refreshToken>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/refresh`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_refresh_refreshToken>
        }

        /**
         * Registers a new user and creates their tenant.
         */
        public async register(params: RequestType<typeof api_auth_register_register>): Promise<ResponseType<typeof api_auth_register_register>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_register>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { hitungCustomGoal as api_kalkulator_custom_goal_hitungCustomGoal } from "~backend/kalkulator/custom_goal";
import { hitungDanaDarurat as api_kalkulator_dana_darurat_hitungDanaDarurat } from "~backend/kalkulator/dana_darurat";
import { hitungKPR as api_kalkulator_kpr_hitungKPR, saveCalculation as api_kalkulator_kpr_saveCalculation, getSavedCalculations as api_kalkulator_kpr_getSavedCalculations, getSavedCalculation as api_kalkulator_kpr_getSavedCalculation, updateCalculation as api_kalkulator_kpr_updateCalculation, deleteCalculation as api_kalkulator_kpr_deleteCalculation } from "~backend/kalkulator/kpr";
import { hitungPensiun as api_kalkulator_pensiun_hitungPensiun } from "~backend/kalkulator/pensiun";

export namespace kalkulator {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.hitungCustomGoal = this.hitungCustomGoal.bind(this)
            this.hitungDanaDarurat = this.hitungDanaDarurat.bind(this)
            this.hitungKPR = this.hitungKPR.bind(this)
            this.hitungPensiun = this.hitungPensiun.bind(this)
            this.saveCalculation = this.saveCalculation.bind(this)
            this.getSavedCalculations = this.getSavedCalculations.bind(this)
            this.getSavedCalculation = this.getSavedCalculation.bind(this)
            this.updateCalculation = this.updateCalculation.bind(this)
            this.deleteCalculation = this.deleteCalculation.bind(this)
        }

        /**
         * Calculates custom savings goal requirements.
         */
        public async hitungCustomGoal(params: RequestType<typeof api_kalkulator_custom_goal_hitungCustomGoal>): Promise<ResponseType<typeof api_kalkulator_custom_goal_hitungCustomGoal>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/custom-goal`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_custom_goal_hitungCustomGoal>
        }

        /**
         * Calculates emergency fund requirements.
         */
        public async hitungDanaDarurat(params: RequestType<typeof api_kalkulator_dana_darurat_hitungDanaDarurat>): Promise<ResponseType<typeof api_kalkulator_dana_darurat_hitungDanaDarurat>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/dana-darurat`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_dana_darurat_hitungDanaDarurat>
        }

        /**
         * Calculates mortgage payment details.
         */
        public async hitungKPR(params: RequestType<typeof api_kalkulator_kpr_hitungKPR>): Promise<ResponseType<typeof api_kalkulator_kpr_hitungKPR>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/kpr`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_kpr_hitungKPR>
        }

        /**
         * Calculates retirement planning requirements.
         */
        public async hitungPensiun(params: RequestType<typeof api_kalkulator_pensiun_hitungPensiun>): Promise<ResponseType<typeof api_kalkulator_pensiun_hitungPensiun>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/pensiun`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_pensiun_hitungPensiun>
        }

        /**
         * Save calculation result.
         */
        public async saveCalculation(params: RequestType<typeof api_kalkulator_kpr_saveCalculation>): Promise<ResponseType<typeof api_kalkulator_kpr_saveCalculation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/save`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_kpr_saveCalculation>
        }

        /**
         * Get saved calculations.
         */
        public async getSavedCalculations(params: RequestType<typeof api_kalkulator_kpr_getSavedCalculations>): Promise<ResponseType<typeof api_kalkulator_kpr_getSavedCalculations>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                tenant_id: params.tenant_id,
                type: params.type,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/saved`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_kpr_getSavedCalculations>
        }

        /**
         * Get specific saved calculation.
         */
        public async getSavedCalculation(params: { id: string; tenant_id: string }): Promise<ResponseType<typeof api_kalkulator_kpr_getSavedCalculation>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                tenant_id: params.tenant_id,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/saved/${encodeURIComponent(params.id)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_kpr_getSavedCalculation>
        }

        /**
         * Update saved calculation.
         */
        public async updateCalculation(params: RequestType<typeof api_kalkulator_kpr_updateCalculation>): Promise<ResponseType<typeof api_kalkulator_kpr_updateCalculation>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                tenant_id: params.tenant_id,
                nama_perhitungan: params.nama_perhitungan,
                tipe_kalkulator: params.tipe_kalkulator,
                input_data: params.input_data,
                result_data: params.result_data,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/saved/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_kpr_updateCalculation>
        }

        /**
         * Delete saved calculation.
         */
        public async deleteCalculation(params: { id: string; tenant_id: string }): Promise<ResponseType<typeof api_kalkulator_kpr_deleteCalculation>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                tenant_id: params.tenant_id,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kalkulator/saved/${encodeURIComponent(params.id)}`, {query, method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kalkulator_kpr_deleteCalculation>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_kategori_create_create } from "~backend/kategori/create";
import { deleteKategori as api_kategori_delete_deleteKategori } from "~backend/kategori/delete";
import { get as api_kategori_get_get } from "~backend/kategori/get";
import { list as api_kategori_list_list } from "~backend/kategori/list";
import { update as api_kategori_update_update } from "~backend/kategori/update";

export namespace kategori {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteKategori = this.deleteKategori.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new category.
         */
        public async create(params: RequestType<typeof api_kategori_create_create>): Promise<ResponseType<typeof api_kategori_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kategori`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kategori_create_create>
        }

        /**
         * Soft deletes a category.
         */
        public async deleteKategori(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/kategori/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a category by ID.
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_kategori_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kategori/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kategori_get_get>
        }

        /**
         * Retrieves all categories for a tenant, including system defaults.
         */
        public async list(params: RequestType<typeof api_kategori_list_list>): Promise<ResponseType<typeof api_kategori_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "include_system": params["include_system"] === undefined ? undefined : String(params["include_system"]),
                limit:            params.limit === undefined ? undefined : String(params.limit),
                offset:           params.offset === undefined ? undefined : String(params.offset),
                "parent_only":    params["parent_only"] === undefined ? undefined : String(params["parent_only"]),
                "tenant_id":      params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kategori`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kategori_list_list>
        }

        /**
         * Updates a category.
         */
        public async update(params: RequestType<typeof api_kategori_update_update>): Promise<ResponseType<typeof api_kategori_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                ikon:                params.ikon,
                "kategori_induk_id": params["kategori_induk_id"],
                "nama_kategori":     params["nama_kategori"],
                warna:               params.warna,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/kategori/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_kategori_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { laporanBudgetVsActual as api_laporan_budget_vs_actual_laporanBudgetVsActual } from "~backend/laporan/budget_vs_actual";
import { laporanCashflow as api_laporan_cashflow_laporanCashflow } from "~backend/laporan/cashflow";
import { laporanNetWorth as api_laporan_net_worth_laporanNetWorth } from "~backend/laporan/net_worth";

export namespace laporan {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.laporanBudgetVsActual = this.laporanBudgetVsActual.bind(this)
            this.laporanCashflow = this.laporanCashflow.bind(this)
            this.laporanNetWorth = this.laporanNetWorth.bind(this)
        }

        /**
         * Generates budget vs actual report for a specific month.
         */
        public async laporanBudgetVsActual(params: RequestType<typeof api_laporan_budget_vs_actual_laporanBudgetVsActual>): Promise<ResponseType<typeof api_laporan_budget_vs_actual_laporanBudgetVsActual>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                bulan:       String(params.bulan),
                tahun:       String(params.tahun),
                "tenant_id": params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/laporan/budget-vs-actual`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_laporan_budget_vs_actual_laporanBudgetVsActual>
        }

        /**
         * Generates cashflow report for a specific period.
         */
        public async laporanCashflow(params: RequestType<typeof api_laporan_cashflow_laporanCashflow>): Promise<ResponseType<typeof api_laporan_cashflow_laporanCashflow>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "akun_id":        params["akun_id"],
                "tanggal_dari":   params["tanggal_dari"],
                "tanggal_sampai": params["tanggal_sampai"],
                "tenant_id":      params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/laporan/cashflow`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_laporan_cashflow_laporanCashflow>
        }

        /**
         * Generates net worth report showing assets, liabilities, and trends.
         */
        public async laporanNetWorth(params: RequestType<typeof api_laporan_net_worth_laporanNetWorth>): Promise<ResponseType<typeof api_laporan_net_worth_laporanNetWorth>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "tanggal_dari":   params["tanggal_dari"],
                "tanggal_sampai": params["tanggal_sampai"],
                "tenant_id":      params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/laporan/net-worth`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_laporan_net_worth_laporanNetWorth>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_tenant_create_create } from "~backend/tenant/create";
import { deleteTenant as api_tenant_delete_deleteTenant } from "~backend/tenant/delete";
import { get as api_tenant_get_get } from "~backend/tenant/get";
import { list as api_tenant_list_list } from "~backend/tenant/list";
import { update as api_tenant_update_update } from "~backend/tenant/update";

export namespace tenant {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteTenant = this.deleteTenant.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new tenant.
         */
        public async create(params: RequestType<typeof api_tenant_create_create>): Promise<ResponseType<typeof api_tenant_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tenant`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tenant_create_create>
        }

        /**
         * Soft deletes a tenant.
         */
        public async deleteTenant(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/tenant/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a tenant by ID.
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_tenant_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tenant/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tenant_get_get>
        }

        /**
         * Retrieves all tenants with pagination.
         */
        public async list(params: RequestType<typeof api_tenant_list_list>): Promise<ResponseType<typeof api_tenant_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tenant`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tenant_list_list>
        }

        /**
         * Updates a tenant.
         */
        public async update(params: RequestType<typeof api_tenant_update_update>): Promise<ResponseType<typeof api_tenant_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "logo_url":   params["logo_url"],
                nama:         params.nama,
                "sub_domain": params["sub_domain"],
                "zona_waktu": params["zona_waktu"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tenant/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tenant_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_transaksi_create_create } from "~backend/transaksi/create";
import { deleteTransaksi as api_transaksi_delete_deleteTransaksi } from "~backend/transaksi/delete";
import { get as api_transaksi_get_get } from "~backend/transaksi/get";
import { list as api_transaksi_list_list } from "~backend/transaksi/list";
import { createTransfer as api_transaksi_transfer_createTransfer } from "~backend/transaksi/transfer";
import { update as api_transaksi_update_update } from "~backend/transaksi/update";

export namespace transaksi {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.createTransfer = this.createTransfer.bind(this)
            this.deleteTransaksi = this.deleteTransaksi.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new transaction.
         */
        public async create(params: RequestType<typeof api_transaksi_create_create>): Promise<ResponseType<typeof api_transaksi_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transaksi`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaksi_create_create>
        }

        /**
         * Creates a transfer between two accounts.
         */
        public async createTransfer(params: RequestType<typeof api_transaksi_transfer_createTransfer>): Promise<ResponseType<typeof api_transaksi_transfer_createTransfer>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transaksi/transfer`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaksi_transfer_createTransfer>
        }

        /**
         * Soft deletes a transaction.
         */
        public async deleteTransaksi(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/transaksi/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a transaction by ID.
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_transaksi_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transaksi/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaksi_get_get>
        }

        /**
         * Retrieves all transactions for a tenant with filters.
         */
        public async list(params: RequestType<typeof api_transaksi_list_list>): Promise<ResponseType<typeof api_transaksi_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "akun_id":        params["akun_id"],
                jenis:            params.jenis,
                "kategori_id":    params["kategori_id"],
                limit:            params.limit === undefined ? undefined : String(params.limit),
                offset:           params.offset === undefined ? undefined : String(params.offset),
                "tanggal_dari":   params["tanggal_dari"],
                "tanggal_sampai": params["tanggal_sampai"],
                "tenant_id":      params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transaksi`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaksi_list_list>
        }

        /**
         * Updates a transaction.
         */
        public async update(params: RequestType<typeof api_transaksi_update_update>): Promise<ResponseType<typeof api_transaksi_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "akun_id":           params["akun_id"],
                catatan:             params.catatan,
                jenis:               params.jenis,
                "kategori_id":       params["kategori_id"],
                "mata_uang":         params["mata_uang"],
                nominal:             params.nominal,
                "split_kategori":    params["split_kategori"],
                "tanggal_transaksi": params["tanggal_transaksi"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transaksi/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaksi_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_tujuan_create_create } from "~backend/tujuan/create";
import { deleteTujuan as api_tujuan_delete_deleteTujuan } from "~backend/tujuan/delete";
import { get as api_tujuan_get_get } from "~backend/tujuan/get";
import {
    createKontribusi as api_tujuan_kontribusi_createKontribusi,
    deleteKontribusi as api_tujuan_kontribusi_deleteKontribusi,
    listKontribusi as api_tujuan_kontribusi_listKontribusi
} from "~backend/tujuan/kontribusi";
import { list as api_tujuan_list_list } from "~backend/tujuan/list";
import { update as api_tujuan_update_update } from "~backend/tujuan/update";

export namespace tujuan {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.createKontribusi = this.createKontribusi.bind(this)
            this.deleteKontribusi = this.deleteKontribusi.bind(this)
            this.deleteTujuan = this.deleteTujuan.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.listKontribusi = this.listKontribusi.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new savings goal.
         */
        public async create(params: RequestType<typeof api_tujuan_create_create>): Promise<ResponseType<typeof api_tujuan_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tujuan`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tujuan_create_create>
        }

        /**
         * Creates a contribution to a savings goal.
         */
        public async createKontribusi(params: RequestType<typeof api_tujuan_kontribusi_createKontribusi>): Promise<ResponseType<typeof api_tujuan_kontribusi_createKontribusi>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tujuan/kontribusi`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tujuan_kontribusi_createKontribusi>
        }

        /**
         * Deletes a contribution.
         */
        public async deleteKontribusi(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/tujuan/kontribusi/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Soft deletes a savings goal.
         */
        public async deleteTujuan(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/tujuan/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a savings goal by ID.
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_tujuan_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tujuan/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tujuan_get_get>
        }

        /**
         * Retrieves all savings goals for a tenant.
         */
        public async list(params: RequestType<typeof api_tujuan_list_list>): Promise<ResponseType<typeof api_tujuan_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "jenis_tujuan": params["jenis_tujuan"],
                limit:          params.limit === undefined ? undefined : String(params.limit),
                offset:         params.offset === undefined ? undefined : String(params.offset),
                "tenant_id":    params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tujuan`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tujuan_list_list>
        }

        /**
         * Retrieves all contributions for a savings goal.
         */
        public async listKontribusi(params: { tujuan_id: string }): Promise<ResponseType<typeof api_tujuan_kontribusi_listKontribusi>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tujuan/${encodeURIComponent(params.tujuan_id)}/kontribusi`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tujuan_kontribusi_listKontribusi>
        }

        /**
         * Updates a savings goal.
         */
        public async update(params: RequestType<typeof api_tujuan_update_update>): Promise<ResponseType<typeof api_tujuan_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                catatan:           params.catatan,
                "jenis_tujuan":    params["jenis_tujuan"],
                "nama_tujuan":     params["nama_tujuan"],
                "target_nominal":  params["target_nominal"],
                "tenggat_tanggal": params["tenggat_tanggal"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tujuan/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tujuan_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getStats as api_dashboard_stats_getStats } from "~backend/dashboard/stats";

import { acceptInvite as api_user_accept_invite_acceptInvite } from "~backend/user/accept_invite";
import { inviteUser as api_user_invite_inviteUser } from "~backend/user/invite";
import { listMembers as api_user_list_members_listMembers } from "~backend/user/list_members";
import { removeMember as api_user_remove_member_removeMember } from "~backend/user/remove_member";
import { updatePermission as api_user_update_permission_updatePermission } from "~backend/user/update_permission";

export namespace dashboard {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getStats = this.getStats.bind(this)
        }

        /**
         * Gets dashboard statistics for a tenant.
         */
        public async getStats(params: RequestType<typeof api_dashboard_stats_getStats>): Promise<ResponseType<typeof api_dashboard_stats_getStats>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "tenant_id": params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/stats`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_dashboard_stats_getStats>
        }
    }
}

export namespace user {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.acceptInvite = this.acceptInvite.bind(this)
            this.inviteUser = this.inviteUser.bind(this)
            this.listMembers = this.listMembers.bind(this)
            this.removeMember = this.removeMember.bind(this)
            this.updatePermission = this.updatePermission.bind(this)
        }

        /**
         * Accepts an invitation to join a tenant.
         */
        public async acceptInvite(params: RequestType<typeof api_user_accept_invite_acceptInvite>): Promise<ResponseType<typeof api_user_accept_invite_acceptInvite>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/accept-invite`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_accept_invite_acceptInvite>
        }

        /**
         * Invites a user to join a tenant.
         */
        public async inviteUser(params: RequestType<typeof api_user_invite_inviteUser>): Promise<ResponseType<typeof api_user_invite_inviteUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/invite`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_invite_inviteUser>
        }

        /**
         * Retrieves all members of a tenant.
         */
        public async listMembers(params: RequestType<typeof api_user_list_members_listMembers>): Promise<ResponseType<typeof api_user_list_members_listMembers>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                "tenant_id": params["tenant_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/members`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_list_members_listMembers>
        }

        /**
         * Removes a user from a tenant.
         */
        public async removeMember(params: RequestType<typeof api_user_remove_member_removeMember>): Promise<void> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "pengguna_id": params["pengguna_id"],
                "removed_by":  params["removed_by"],
                "tenant_id":   params["tenant_id"],
            })

            await this.baseClient.callTypedAPI(`/user/member`, {query, method: "DELETE", body: undefined})
        }

        /**
         * Updates a user's permission/role in a tenant.
         */
        public async updatePermission(params: RequestType<typeof api_user_update_permission_updatePermission>): Promise<ResponseType<typeof api_user_update_permission_updatePermission>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/permission`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_update_permission_updatePermission>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.13)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
